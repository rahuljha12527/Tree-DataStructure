import java.util.ArrayList;
import java.util.Queue;
import java.util.LinkedList;

public class Solution {

	
	public static ArrayList<Node<BinaryTreeNode<Integer>>> LLForEachLevel(BinaryTreeNode<Integer> root) {
		
        
        ArrayList<Node<BinaryTreeNode<Integer>>> a=new ArrayList<>();
        
        Queue<BinaryTreeNode<Integer>> q=new LinkedList<>();
        
        
        Node<BinaryTreeNode<Integer>> head=new Node<BinaryTreeNode<Integer>>(null);
        head=null;
        
        Node<BinaryTreeNode<Integer>> tail=new Node<BinaryTreeNode<Integer>>(null);
        
        tail=null;
        
        q.add(root);
        q.add(null);
        
        while(!q.isEmpty()){
            
         BinaryTreeNode<Integer> curr=q.poll();
         
            if(curr==null){
                
                a.add(head);
               // head=new Node<BinaryTreeNode<Integer>>(root);
                head=null;
                
                
                //tail=new Node<BinaryTreeNode<Integer>>(root);
                tail=null;
                
                
                
                if(!q.isEmpty()){
                    q.add(null);
                }
                
            }
            
            else{
                
                if(curr.left!=null){
                    q.add(curr.left);
                }
                
                if(curr.right!=null){
                    q.add(curr.right);
                }
                
                
                Node<BinaryTreeNode<Integer>> nodes=new Node<BinaryTreeNode<Integer>>(curr);
                
                if(head==null){
                    head=nodes;
                    tail=nodes;
                }
                
                else{
                    tail.next=nodes;
                    tail=tail.next;
                }
                
            }
            
            
            
        }
            return a;
		

	}


}
