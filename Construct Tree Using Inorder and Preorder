public class Solution {

	/*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */

	public static BinaryTreeNode<Integer> getTreeFromPreorderAndInorder(int[] pre,
			int[] in){
		
			// Write your code here
		
      int preStart=0;
      int preEnd=pre.length-1;
      int inStart=0;
      int inEnd=in.length-1;  
        
      return Construct(pre,preStart,preEnd,in,inStart,inEnd);
        
	}
    
    public static BinaryTreeNode<Integer> Construct(int [] pre,int preStart,int preEnd,int[] in,int inStart,int inEnd){
        
        if(preStart>preEnd || inStart>inEnd){
            return null;
        }
        int val=pre[preStart];
        BinaryTreeNode<Integer> Node=new BinaryTreeNode<>(val);
        
        int k=0;
        for(int i=0;i<in.length;i++){
            if(val==in[i]){
                k=i;
                break;
            }
        }
        
    Node.left=Construct(pre,preStart+1,preStart+k-inStart,in,inStart,k-1);
    Node.right =Construct(pre,preStart+(k-inStart)+1,preEnd,in,k+1,inEnd);
        
        return Node;
        
    }

}
