// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/
#include<queue>
void printLevelWise(BinaryTreeNode<int> *root) {
   
    if(root==NULL){
        return;
    }
    
    queue<BinaryTreeNode<int>*> q;
    
    BinaryTreeNode<int> *curr;
    q.push(root);
    q.push(NULL);
    
    while(q.size()>1){
        curr=q.front();
        q.pop();
        if(curr==NULL){
            q.push(NULL);
         //   cout<<"\n";
        }
        
        else{
            
            cout<<curr->data<<":";
            if(curr->left){
                q.push(curr->left);
                cout<<"L:"<<curr->left->data<<",";
            }
             if(curr->left==NULL){
                  cout<<"L:"<<"-1,";    
                }
            if(curr->right){
                q.push(curr->right);
                cout<<"R:"<<curr->right->data;
            }
         //   else{
               
                if(curr->right==NULL){
                    cout<<"R:"<<"-1";
                }
                
           // }
           cout<<endl;
            
        }
        
    }
    

}
